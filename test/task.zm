/******************************************************************************\
FILE:           task.zm
AUTHOR:         Maarten Duijndam

DESCRIPTION: Describes the familiarization and test phase of the experiment.

\******************************************************************************/

import eyetracker_eyelink_infant;
import stimuli;
import grouping;
import defs;
import output;
import test_page;
import std_etcal_page;


//Item types are used to get the cumulative times
ItemType get_item_type(TestItem[][] items, int n)
{
    return items[selected_group][n].type;
}

Block test_block
{

    Part calibration
    {
        on_event:entry()
        {
            etcal_page.action(this);
        }
    }

    Block familiarization
    {
        TestItem        item;   // current item
        dur[..]         cumulative_times;
        int             nth_stim; // must always be 0 (first stim) or 1 second.

        on_event:entry()
        {
            cumulative_times.size = ITEM_SENTINAL;
            int i = 0;
            while (i < cumulative_times.size) {
                cumulative_times[i] = 0ms;
                i++;
            }
            //num_cycles = fam_items[selected_group].size;
            num_cycles = 18;

            // to 1.4 => new file format eye-tracker.
            int listnum = selected_group + 1;
            int recordingnum = 0;
            string edfname = 
                format(expdb.experiment.session.id, 4) + "_Fam" + "_" + 
                format(listnum, 2) + "_" + 
                format(recordingnum, 2);

            // Let eye-tracker open a data file. 
            eyetracker.open_data_file(
                edfname, 
                expdb.experiment.id, 
                expdb.researcher.id, 
                expdb.participant.id, 
                expdb.experiment.session.id, 
                listnum, recordingnum);
            eyetracker.print_to_data_file("Preferential Listening Segmentation");

            // Prepare test page.
            test_page.setup(FAM_PHASE);
        }

        on_event:exit()
        {
            test_page.cleanup();

            eyetracker.abort();
            eyetracker.close_data_file();
            
            // Save familiarization phase output table as CSV file.

            fam_output_save();
        }

        Trial trial
        {
            on_event:entry()
            {
                // if we already have 45000ms looking time for the current
                // item select the next stimulus.
                if (
                    cumulative_times[get_item_type(fam_items, nth_stim)] >
                    45000ms
                    )
                {
                    nth_stim = (nth_stim + 1) % fam_items[selected_group].size;
                }
                
                item = fam_items[selected_group][nth_stim];

                // Add begin of trial message to eye-tracker data file for
                // analysis with the Fixation tool (Cozijn 1994).
                eyetracker.print_to_data_file(
                        "trialbeg " +
                        string(item.number) + " " +
                        string(familiarization.cycle + 1) + " " +
                        string(item.number) + " " +
                        string(item.type)
                        );
                eyetracker.print_to_data_file(
                        "plafile " +
                        string(item.type) + 
                        string(item.number) + ".bmp"
                        );

                // Show information on eye-tracker screen.
                eyetracker.send_command(
                        "record_status_message "
                        "'Familiarization trial " +
                        string(familiarization.cycle + 1)
                        + "'"
                        );

                bool present_attention = (familiarization.cycle == 0);

                // Start trial.
                test_page.action(
                            this,
                            item,
                            reference_time,
                            present_attention,
                            familiarization.cycle
                            );
            }

            on_event:exit()
            {
                // Add new row to familiarization output table.
                TestOutput output;
                output.phase = FAM_PHASE;
                output.trialnum = familiarization.cycle + 1;
                output.number = item.number;
                output.type = item.type;
                output.cumlt = int(test_page.response.cumlt);
                output.cumnlt = int(test_page.response.cumnlt);
                // add looking + not looking time to stimulus, since we 
                // are interested in how long the infant has been listing.
                cumulative_times[item.type] +=
                    (test_page.response.cumlt + test_page.response.cumnlt);
                output.lookedaway = test_page.response.lookedaway;
                output.cumlt_s1 = cumulative_times[get_item_type(fam_items, 0)];
                output.cumlt_s2 = cumulative_times[get_item_type(fam_items, 1)];
                fam_output_append(output);

                // Add end of trial message.
                eyetracker.print_to_data_file("trialend " +
                        string(item.number) + " " +
                        string(familiarization.cycle + 1) + " " +
                        string(item.number) + " " +
                        string(item.type));

                // Clear eye-tracker status line.
                eyetracker.send_command("record_status_message ''");
                nth_stim = (nth_stim + 1) % fam_items[selected_group].size;
            }
        }

        TransientPart test_finish
        {
            // Test whether we have presented both itemtypes for 45 seconds
            // or more.
            on_event:entry()
            {
                bool s1_gt_45;
                bool s2_gt_45;
                bool finished;
                s1_gt_45 = cumulative_times[get_item_type(fam_items, 0)] > 45s;
                s2_gt_45 = cumulative_times[get_item_type(fam_items, 1)] > 45s;
                finished = s1_gt_45 && s2_gt_45;
                if (finished)
                    familiarization.num_cycles = familiarization.cycle;
            }
        }
    }

    Block test
    {
        TestItem        item;   // current item
        TestOutput      output; // current output table row

        on_event:entry()
        {
            // Randomize test items table.
            // if (shuffle_test_items() != OK) terminate;

            num_cycles = test_items[selected_group].size;

            // to 1.4 => new file format eye-tracker.
            int listnum = selected_group + 1;
            int recordingnum = 0;
            string edfname = 
                format(expdb.experiment.session.id, 4) + "_" + 
                format(listnum, 2) + "_" + 
                format(recordingnum, 2);

            // Let eye-tracker open a data file. 
            eyetracker.open_data_file(
                edfname, 
                expdb.experiment.id, 
                expdb.researcher.id, 
                expdb.participant.id, 
                expdb.experiment.session.id, 
                listnum, recordingnum);
            eyetracker.print_to_data_file("Preferential Listening Segmentation");

            // Prepare test page.
            test_page.setup(TEST_PHASE);
        }


        on_event:exit()
        {
            test_page.cleanup();

            eyetracker.abort();
            eyetracker.close_data_file();

            // Save test phase output table as CSV file.
            test_output_save();

            // Fetch the data
            eyetracker.retrieve_data_files();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items[selected_group][test.cycle];

                // Add begin of trial message to eye-tracker data file for
                // analysis with the Fixation tool (Cozijn 1994).
                eyetracker.print_to_data_file("trialbeg " +
                    string(item.number) + " " +
                    string(test.cycle + 1) + " " +
                    string(item.number) + " " +
                    string(item.type));
                eyetracker.print_to_data_file("plafile " +
                    string(item.type) + 
                    string(item.number) + ".bmp");

                // Show information on eye-tracker screen.
                eyetracker.send_command("record_status_message "
                    "'Test trial " + string(test.cycle+1) + "'");

                // Start trial.
                test_page.action(this, item, reference_time, test.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.phase = TEST_PHASE;
                output.trialnum = test.cycle + 1;
                output.number = item.number;
                output.type = item.type;
                output.cumlt = int(test_page.response.cumlt);
                output.cumnlt = int(test_page.response.cumnlt);
                output.lookedaway = test_page.response.lookedaway;
                test_output_append(output);

                // Add end of trial message.
                eyetracker.print_to_data_file("trialend " +
                    string(item.number) + " " +
                    string(test.cycle + 1) + " " +
                    string(item.number) + " " +
                    string(item.type));

                // Clear eye-tracker status line.
                eyetracker.send_command("record_status_message ''");
            }
        }
    }
}

void action(Part caller)
{
    // activate test phase with caller.
    test_block.enter(caller);
}
