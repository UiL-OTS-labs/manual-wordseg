/******************************************************************************\
FILE:           task.zm
AUTHOR:         Maarten Duijndam

DESCRIPTION: Describes the familiarization and test phase of the experiment.

\******************************************************************************/

import eyetracker_eyelink_infant;
import stimuli;
import grouping;
import defs;
import output;
import test_page;
import std_etcal_page;
import hvf_event;


//Item types are used to get the cumulative times
ItemType get_item_type(TestItem[][] items, int n)
{
    return items[selected_group][n].type;
}

Block fam_block
{
    on_event:entry()
    {
        //Disable button_box during calibration
        control.button_box.disable_buttons();
    }

    Part calibration
    {
        on_event:entry()
        {
            etcal_page.action(this);
        }
    }

    Block familiarization
    {
        TestItem        item;   // current item
        dur[..]         eye_cumulative_times;
        dur[..]         man_cumulative_times;
        int             nth_stim; // must always be 0 (first stim) or 1 second.

        on_event:entry()
        {
            //Enable the used buttons.
            control.button_box.disable_buttons();
            control.button_box.enable_button(
                    int(BUTTON_LEFT),
                    EVENT_STOP_LOOKING
                    );
            control.button_box.enable_button(
                    int(BUTTON_LOWER),
                    EVENT_START_ATTENTION
                    );
            control.button_box.enable_button(
                    int(BUTTON_RIGHT),
                    EVENT_START_LOOKING
                    );

            eye_cumulative_times.size = ITEM_SENTINAL;
            man_cumulative_times.size = ITEM_SENTINAL;

            // We run at most 18 cycles or when both types of stimuli are
            // attended for 45seconds or more(see TransientPart below). 
            num_cycles = 18;

            // to 1.4 => new file format eye-tracker.
            int listnum = selected_group + 1;
            int recordingnum = 0;
            string edfname = 
                format(expdb.experiment.session.id, 4) + "_Fam" + "_" + 
                format(listnum, 2) + "_" + 
                format(recordingnum, 2);

            // Let eye-tracker open a data file. 
            eyetracker.open_data_file(
                edfname, 
                expdb.experiment.id, 
                expdb.researcher.id, 
                expdb.participant.id, 
                expdb.experiment.session.id, 
                listnum, recordingnum);
            eyetracker.print_to_data_file("Preferential Listening Segmentation");

            // Prepare test page.
            test_page.setup(FAM_PHASE);
        }

        on_event:exit()
        {
            test_page.cleanup();

            control.button_box.disable_buttons();

            eyetracker.abort();
            eyetracker.close_data_file();
            
            // Save familiarization phase output table as CSV file.

            fam_output_save();
        }

        Trial trial
        {
            on_event:entry()
            {
                // if we already have 45000ms looking time for the current
                // item select the next stimulus.
                if (
                    man_cumulative_times[get_item_type(fam_items, nth_stim)] >
                    45000ms
                    )
                {
                    nth_stim = (nth_stim + 1) % fam_items[selected_group].size;
                }
                
                item = fam_items[selected_group][nth_stim];

                // Add begin of trial message to eye-tracker data file for
                // analysis with the Fixation tool (Cozijn 1994).
                eyetracker.print_to_data_file(
                        "trialbeg " +
                        string(item.number) + " " +
                        string(familiarization.cycle + 1) + " " +
                        string(item.number) + " " +
                        string(item.type)
                        );
                eyetracker.print_to_data_file(
                        "plafile " +
                        string(item.type) + 
                        string(item.number) + ".bmp"
                        );

                // Show information on eye-tracker screen.
                eyetracker.send_command(
                        "record_status_message "
                        "'Familiarization trial " +
                        string(familiarization.cycle + 1)
                        + "'"
                        );

                // Set whether or not to present the attention grabber.
                //bool present_attention = (familiarization.cycle == 0);
                bool present_attention = true;

                control.set_current_trial(familiarization.cycle + 1);

                // Start trial.
                test_page.action(
                            this,
                            item,
                            reference_time,
                            familiarization.cycle
                            );
            }

            on_event:exit()
            {
                // Add end of trial message.
                eyetracker.print_to_data_file("trialend " +
                        string(item.number) + " " +
                        string(familiarization.cycle + 1) + " " +
                        string(item.number) + " " +
                        string(item.type));

                // Clear eye-tracker status line.
                eyetracker.send_command("record_status_message ''");
                nth_stim = (nth_stim + 1) % fam_items[selected_group].size;
                
                // Add new row to familiarization output table.
                TestOutput eoutput;
                eoutput.phase       = FAM_PHASE;
                eoutput.trialnum    = familiarization.cycle + 1;
                eoutput.number      = item.number;
                eoutput.type        = item.type;
                eoutput.cumlt       = int(test_page.eye_response.cumlt);
                eoutput.cumnlt      = int(test_page.eye_response.cumnlt);
                // add looking + not looking time to stimulus, since we 
                // are interested in how long the infant has been listing.
                eye_cumulative_times[item.type] +=
                    (test_page.eye_response.cumlt + test_page.eye_response.cumnlt);
                eoutput.lookedaway  = test_page.eye_response.lookedaway;
                eoutput.cumlt_s1    = eye_cumulative_times[get_item_type(fam_items, 0)];
                eoutput.cumlt_s2    = eye_cumulative_times[get_item_type(fam_items, 1)];
                output_append(fam_eye_output, eoutput);

                TestOutput moutput;
                moutput.phase       = FAM_PHASE;
                moutput.trialnum    = familiarization.cycle + 1;
                moutput.number      = item.number;
                moutput.type        = item.type;
                moutput.cumlt       = int(test_page.man_response.cumlt);
                moutput.cumnlt      = int(test_page.man_response.cumnlt);
                man_cumulative_times[item.type] += (
                    test_page.man_response.cumlt +
                    test_page.man_response.cumnlt
                    );
                moutput.cumlt_s1 = man_cumulative_times[get_item_type(fam_items, 0)];
                moutput.cumlt_s2 = man_cumulative_times[get_item_type(fam_items, 1)];
                output_append(fam_man_output, moutput);
            }
        }

        TransientPart test_finish
        {
            // Test whether we have presented both itemtypes for 45 seconds
            // or more.
            on_event:entry()
            {
                bool s1_gt_45;
                bool s2_gt_45;
                bool finished;
                s1_gt_45 = man_cumulative_times[get_item_type(fam_items, 0)] > 45s;
                s2_gt_45 = man_cumulative_times[get_item_type(fam_items, 1)] > 45s;
                finished = s1_gt_45 && s2_gt_45;
                if (finished)
                    familiarization.num_cycles = familiarization.cycle;
            }
        }
    }
}

void fam_action(Part caller)
{
    // activate test phase with caller.
    fam_block.enter(caller);
}
